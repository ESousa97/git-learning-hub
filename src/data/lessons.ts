// src/data/lessons.ts

export interface InteractiveContent {
  question: string;
  options: string[];
  correct: number;
  explanation: string;
}

export interface Command {
  command: string;
  description: string;
  expected: string;
}

export interface ExerciseContent {
  task: string;
  command: string;
  expectedOutput: string;
  hint: string;
  explanation: string;
}

export interface LessonContent {
  theory?: string;
  interactive?: InteractiveContent;
  exercise?: ExerciseContent;
  commands?: Command[];
}

export interface Lesson {
  id: string;
  title: string;
  type: 'theory' | 'command' | 'practical';
  duration: string;
  difficulty: 'Iniciante' | 'Intermedi√°rio' | 'Avan√ßado';
  description: string;
  content: LessonContent;
}

export interface Badge {
  name: string;
  description: string;
  icon: string;
  color: string;
}

export interface Tip {
  title: string;
  description: string;
  icon: string;
}

export const lessonsData: Record<string, Lesson[]> = {
  basics: [
    {
      id: 'basics-1',
      title: 'O que √© Git?',
      type: 'theory',
      duration: '5 min',
      difficulty: 'Iniciante',
      description: 'Entenda os conceitos fundamentais do Git e controle de vers√£o',
      content: {
        theory: `
Git √© um sistema de controle de vers√£o distribu√≠do criado por Linus Torvalds em 2005. 

**Por que usar Git?**
‚Ä¢ üìö **Hist√≥rico completo**: Rastreia todas as mudan√ßas nos seus arquivos
‚Ä¢ üîÑ **Colabora√ß√£o**: Permite que v√°rias pessoas trabalhem no mesmo projeto
‚Ä¢ üîí **Backup distribu√≠do**: Cada desenvolvedor tem uma c√≥pia completa do projeto
‚Ä¢ üåø **Branches**: Trabalhe em funcionalidades paralelas sem afetar o c√≥digo principal

**Conceitos b√°sicos:**
‚Ä¢ **Reposit√≥rio**: Pasta que cont√©m seu projeto e todo o hist√≥rico
‚Ä¢ **Commit**: Um snapshot do seu projeto em um momento espec√≠fico
‚Ä¢ **Working Directory**: Os arquivos que voc√™ est√° editando
‚Ä¢ **Staging Area**: √Årea tempor√°ria antes de fazer commit

Git √© diferente de outros sistemas porque √© **distribu√≠do** - n√£o depende de um servidor central!
        `,
        interactive: {
          question: 'Qual √© a principal vantagem do Git ser um sistema distribu√≠do?',
          options: [
            '√â mais r√°pido que sistemas centralizados',
            'Cada desenvolvedor tem uma c√≥pia completa do hist√≥rico',
            'Usa menos espa√ßo em disco',
            '√â mais f√°cil de aprender'
          ],
          correct: 1,
          explanation: 'Correto! Com Git distribu√≠do, cada clone √© um backup completo do projeto, incluindo todo o hist√≥rico. Isso significa que voc√™ pode trabalhar offline e ter seguran√ßa total dos dados.'
        }
      }
    },
    {
      id: 'basics-2',
      title: 'Instala√ß√£o e Configura√ß√£o',
      type: 'practical',
      duration: '10 min',
      difficulty: 'Iniciante',
      description: 'Configure o Git no seu sistema e defina suas credenciais',
      content: {
        theory: `
Antes de come√ßar a usar Git, precisamos configur√°-lo corretamente.

**Configura√ß√µes essenciais:**
‚Ä¢ Nome de usu√°rio
‚Ä¢ Email
‚Ä¢ Editor padr√£o
‚Ä¢ Comportamento de line endings

Estas configura√ß√µes s√£o importantes porque aparecem em todos os seus commits!
        `,
        commands: [
          {
            command: 'git config --global user.name "Seu Nome"',
            description: 'Define seu nome para os commits',
            expected: 'Configura√ß√£o salva com sucesso'
          },
          {
            command: 'git config --global user.email "seu@email.com"',
            description: 'Define seu email para os commits',
            expected: 'Email configurado com sucesso'
          },
          {
            command: 'git config --list',
            description: 'Visualiza todas as configura√ß√µes',
            expected: 'Lista de configura√ß√µes do Git'
          }
        ]
      }
    },
    {
      id: 'basics-3',
      title: 'git init - Criando um Reposit√≥rio',
      type: 'command',
      duration: '8 min',
      difficulty: 'Iniciante',
      description: 'Aprenda a inicializar um novo reposit√≥rio Git',
      content: {
        theory: `
O comando \`git init\` cria um novo reposit√≥rio Git em uma pasta.

**O que acontece quando voc√™ executa git init?**
‚Ä¢ Cria uma pasta oculta \`.git\` na raiz do projeto
‚Ä¢ Esta pasta cont√©m toda a infraestrutura do Git
‚Ä¢ Transforma uma pasta comum em um reposit√≥rio Git

**Sintaxe:**
\`\`\`bash
git init                    # Inicializa na pasta atual
git init nome-do-projeto    # Cria pasta e inicializa
\`\`\`

‚ö†Ô∏è **Importante**: Nunca delete a pasta .git - voc√™ perderia todo o hist√≥rico!
        `,
        exercise: {
          task: 'Inicialize um novo reposit√≥rio Git',
          command: 'git init',
          expectedOutput: 'Initialized empty Git repository',
          hint: 'Digite exatamente: git init',
          explanation: 'Parab√©ns! Voc√™ criou seu primeiro reposit√≥rio Git. A pasta .git foi criada e cont√©m toda a infraestrutura necess√°ria.'
        }
      }
    },
    {
      id: 'basics-4',
      title: 'git add - Staging Area',
      type: 'command',
      duration: '12 min',
      difficulty: 'Iniciante',
      description: 'Entenda como preparar arquivos para commit',
      content: {
        theory: `
O **Staging Area** (√Årea de Prepara√ß√£o) √© um conceito √∫nico do Git.

**Fluxo de trabalho Git:**
1. **Working Directory**: Voc√™ edita arquivos
2. **Staging Area**: Voc√™ prepara mudan√ßas com \`git add\`
3. **Repository**: Voc√™ salva mudan√ßas com \`git commit\`

**Comandos git add:**
\`\`\`bash
git add arquivo.txt        # Adiciona um arquivo espec√≠fico
git add .                 # Adiciona todos os arquivos
git add *.js              # Adiciona todos arquivos .js
git add pasta/            # Adiciona toda uma pasta
\`\`\`

**Por que usar Staging Area?**
‚Ä¢ Permite commits mais organizados
‚Ä¢ Voc√™ pode escolher exatamente o que incluir
‚Ä¢ Revisa mudan√ßas antes de committar
        `,
        exercise: {
          task: 'Adicione todos os arquivos ao staging area',
          command: 'git add .',
          expectedOutput: 'Files added to staging area',
          hint: 'Use git add . para adicionar todos os arquivos',
          explanation: 'Perfeito! Todos os arquivos foram adicionados ao staging area e est√£o prontos para commit.'
        }
      }
    },
    {
      id: 'basics-5',
      title: 'git commit - Salvando Mudan√ßas',
      type: 'command',
      duration: '15 min',
      difficulty: 'Iniciante',
      description: 'Aprenda a criar commits significativos',
      content: {
        theory: `
O \`git commit\` cria um snapshot permanente das mudan√ßas no staging area.

**Anatomia de um commit:**
‚Ä¢ **Hash √∫nico**: Identifica o commit (ex: a1b2c3d...)
‚Ä¢ **Autor**: Quem fez o commit
‚Ä¢ **Data/Hora**: Quando foi feito
‚Ä¢ **Mensagem**: Descreve as mudan√ßas
‚Ä¢ **Mudan√ßas**: Diff do que foi alterado

**Boas pr√°ticas para mensagens:**
‚úÖ \`git commit -m "Add user authentication"\`
‚úÖ \`git commit -m "Fix login redirect bug"\`
‚úÖ \`git commit -m "Update README with setup instructions"\`

‚ùå \`git commit -m "fix"\`
‚ùå \`git commit -m "updates"\`
‚ùå \`git commit -m "asdasd"\`

**Comandos √∫teis:**
\`\`\`bash
git commit -m "mensagem"     # Commit com mensagem
git commit -am "mensagem"    # Add + commit (s√≥ arquivos j√° rastreados)
git commit --amend          # Modifica o √∫ltimo commit
\`\`\`
        `,
        exercise: {
          task: 'Fa√ßa seu primeiro commit com uma mensagem descritiva',
          command: 'git commit -m "Initial commit"',
          expectedOutput: 'Commit created successfully',
          hint: 'Use git commit -m "sua mensagem" entre aspas',
          explanation: 'Excelente! Voc√™ criou seu primeiro commit. Esta √© agora uma vers√£o salva do seu projeto que nunca ser√° perdida.'
        }
      }
    },
    {
      id: 'basics-6',
      title: 'git status - Verificando Estado',
      type: 'command',
      duration: '10 min',
      difficulty: 'Iniciante',
      description: 'Monitore o estado dos seus arquivos',
      content: {
        theory: `
O \`git status\` √© seu melhor amigo! Mostra o estado atual do reposit√≥rio.

**Informa√ß√µes que git status fornece:**
‚Ä¢ Arquivos modificados
‚Ä¢ Arquivos no staging area
‚Ä¢ Arquivos n√£o rastreados (untracked)
‚Ä¢ Branch atual
‚Ä¢ Commits √† frente/atr√°s do remote

**Estados dos arquivos:**
‚Ä¢ üî¥ **Modified**: Arquivo foi alterado mas n√£o est√° staged
‚Ä¢ üü¢ **Staged**: Arquivo est√° pronto para commit
‚Ä¢ üîµ **Untracked**: Arquivo novo que Git n√£o conhece
‚Ä¢ ‚ö™ **Unmodified**: Arquivo n√£o foi alterado

**Exemplo de sa√≠da:**
\`\`\`
On branch main
Changes to be committed:
  modified:   arquivo.txt

Changes not staged for commit:
  modified:   outro.txt

Untracked files:
  novo-arquivo.txt
\`\`\`
        `,
        exercise: {
          task: 'Verifique o status atual do reposit√≥rio',
          command: 'git status',
          expectedOutput: 'On branch main\nnothing to commit, working tree clean',
          hint: 'Digite git status para ver o estado atual',
          explanation: '√ìtimo! O git status √© essencial para entender o que est√° acontecendo no seu reposit√≥rio.'
        }
      }
    },
    {
      id: 'basics-7',
      title: 'git log - Hist√≥rico de Commits',
      type: 'command',
      duration: '12 min',
      difficulty: 'Iniciante',
      description: 'Explore o hist√≥rico do seu projeto',
      content: {
        theory: `
O \`git log\` mostra o hist√≥rico de commits do seu projeto.

**Varia√ß√µes √∫teis:**
\`\`\`bash
git log                    # Hist√≥rico completo
git log --oneline         # Uma linha por commit
git log --graph           # Mostra branches visualmente
git log -p                # Mostra as mudan√ßas de cada commit
git log --author="nome"   # Commits de um autor espec√≠fico
git log --since="1 week ago"  # Commits da √∫ltima semana
\`\`\`

**Informa√ß√µes em cada commit:**
‚Ä¢ **Hash**: Identificador √∫nico (SHA-1)
‚Ä¢ **Author**: Quem fez o commit
‚Ä¢ **Date**: Quando foi feito
‚Ä¢ **Message**: Descri√ß√£o das mudan√ßas

**Navega√ß√£o no log:**
‚Ä¢ **Espa√ßo**: Pr√≥xima p√°gina
‚Ä¢ **q**: Sair do log
‚Ä¢ **j/k**: Navegar para cima/baixo
        `,
        exercise: {
          task: 'Visualize o hist√≥rico de commits',
          command: 'git log --oneline',
          expectedOutput: 'a1b2c3d Initial commit',
          hint: 'Use git log --oneline para ver uma vers√£o resumida',
          explanation: 'Perfeito! O git log √© fundamental para entender a evolu√ß√£o do seu projeto.'
        }
      }
    },
    {
      id: 'basics-8',
      title: 'git diff - Visualizando Mudan√ßas',
      type: 'command',
      duration: '15 min',
      difficulty: 'Iniciante',
      description: 'Compare vers√µes e veja exatamente o que mudou',
      content: {
        theory: `
O \`git diff\` mostra as diferen√ßas entre vers√µes dos arquivos.

**Tipos de diff:**
\`\`\`bash
git diff                  # Working directory vs staging area
git diff --staged         # Staging area vs √∫ltimo commit
git diff HEAD            # Working directory vs √∫ltimo commit
git diff commit1 commit2  # Entre dois commits espec√≠ficos
\`\`\`

**Lendo o output do diff:**
\`\`\`diff
- linha removida (vermelho)
+ linha adicionada (verde)
  linha sem mudan√ßa
@@ -1,3 +1,4 @@  # Localiza√ß√£o das mudan√ßas
\`\`\`

**Casos de uso:**
‚Ä¢ Revisar mudan√ßas antes de committar
‚Ä¢ Verificar o que foi alterado
‚Ä¢ Comparar vers√µes diferentes
‚Ä¢ Debug de problemas

**Dicas:**
‚Ä¢ Use \`git diff --color-words\` para diffs mais leg√≠veis
‚Ä¢ \`git diff --name-only\` mostra apenas nomes dos arquivos
        `,
        exercise: {
          task: 'Veja as mudan√ßas que est√£o staged para commit',
          command: 'git diff --staged',
          expectedOutput: 'No differences found (nothing staged)',
          hint: 'Use git diff --staged para ver mudan√ßas no staging area',
          explanation: '√ìtimo! O git diff √© essencial para revisar suas mudan√ßas antes de committar.'
        }
      }
    }
  ],

  branching: [
    {
      id: 'branching-1',
      title: 'Conceito de Branches',
      type: 'theory',
      duration: '8 min',
      difficulty: 'Intermedi√°rio',
      description: 'Entenda o poder dos branches no Git',
      content: {
        theory: `
**Branches** s√£o como universos paralelos do seu c√≥digo!

**O que s√£o branches?**
‚Ä¢ Linhas independentes de desenvolvimento
‚Ä¢ Permitem trabalhar em funcionalidades sem afetar o c√≥digo principal
‚Ä¢ S√£o extremamente leves no Git (apenas ponteiros)

**Branch principal:**
‚Ä¢ \`main\` (ou \`master\` em projetos antigos)
‚Ä¢ Cont√©m a vers√£o est√°vel do projeto
‚Ä¢ Nunca deve ser quebrada

**Casos de uso:**
‚Ä¢ üöÄ **feature/login**: Nova funcionalidade de login
‚Ä¢ üêõ **hotfix/critical-bug**: Corre√ß√£o urgente
‚Ä¢ üß™ **experiment/new-ui**: Testes experimentais
‚Ä¢ üìö **docs/api-documentation**: Documenta√ß√£o

**Vantagens:**
‚Ä¢ Isolamento total de mudan√ßas
‚Ä¢ Facilita code review
‚Ä¢ Permite desenvolvimento paralelo
‚Ä¢ Rollback f√°cil se algo der errado
        `,
        interactive: {
          question: 'Qual √© a principal vantagem de usar branches?',
          options: [
            'Economizar espa√ßo em disco',
            'Trabalhar em funcionalidades sem afetar o c√≥digo principal',
            'Acelerar o Git',
            'Fazer backup autom√°tico'
          ],
          correct: 1,
          explanation: 'Exato! Branches permitem desenvolvimento isolado, mantendo o c√≥digo principal est√°vel.'
        }
      }
    },
    {
      id: 'branching-2',
      title: 'git branch - Gerenciando Branches',
      type: 'command',
      duration: '12 min',
      difficulty: 'Intermedi√°rio',
      description: 'Criar, listar e deletar branches',
      content: {
        theory: `
O comando \`git branch\` gerencia branches no seu reposit√≥rio.

**Comandos essenciais:**
\`\`\`bash
git branch                  # Lista branches locais
git branch -a              # Lista todos os branches (local + remote)
git branch nome-branch     # Cria novo branch
git branch -d nome-branch  # Deleta branch (safe)
git branch -D nome-branch  # For√ßa dele√ß√£o
git branch -m novo-nome    # Renomeia branch atual
\`\`\`

**Visualizando branches:**
\`\`\`bash
git branch -v              # Mostra √∫ltimo commit de cada branch
git branch --merged        # Branches j√° merged
git branch --no-merged     # Branches n√£o merged
\`\`\`

**Conven√ß√µes de nomenclatura:**
‚Ä¢ \`feature/user-authentication\`
‚Ä¢ \`bugfix/login-redirect\`
‚Ä¢ \`hotfix/security-patch\`
‚Ä¢ \`docs/api-updates\`
        `,
        exercise: {
          task: 'Crie um novo branch chamado "feature/awesome-feature"',
          command: 'git branch feature/awesome-feature',
          expectedOutput: 'Branch created successfully',
          hint: 'Use git branch seguido do nome do branch',
          explanation: 'Perfeito! Voc√™ criou um novo branch. Note que voc√™ ainda est√° no branch atual - para mudar, use git checkout.'
        }
      }
    }
    // ... mais li√ß√µes de branching
  ],

  collaboration: [
    {
      id: 'collaboration-1',
      title: 'git clone - Copiando Reposit√≥rios',
      type: 'command',
      duration: '10 min',
      difficulty: 'Intermedi√°rio',
      description: 'Aprenda a clonar reposit√≥rios remotos',
      content: {
        theory: `
O \`git clone\` cria uma c√≥pia local de um reposit√≥rio remoto.

**Sintaxe:**
\`\`\`bash
git clone <url-do-repositorio>
git clone <url> nome-da-pasta
git clone --depth 1 <url>  # Clone shallow (sem hist√≥rico)
\`\`\`

**O que acontece no clone:**
‚Ä¢ Downloads todos os arquivos
‚Ä¢ Cria c√≥pia completa do hist√≥rico
‚Ä¢ Configura remote "origin" automaticamente
‚Ä¢ Faz checkout do branch principal

**Protocolos suportados:**
‚Ä¢ HTTPS: \`https://github.com/user/repo.git\`
‚Ä¢ SSH: \`git@github.com:user/repo.git\`
‚Ä¢ Local: \`/path/to/repo\`
        `,
        exercise: {
          task: 'Clone um reposit√≥rio de exemplo',
          command: 'git clone https://github.com/example/repo.git',
          expectedOutput: 'Repository cloned successfully',
          hint: 'Use git clone seguido da URL do reposit√≥rio',
          explanation: '√ìtimo! Voc√™ clonou um reposit√≥rio e agora tem uma c√≥pia local completa.'
        }
      }
    }
    // ... mais li√ß√µes de collaboration
  ],

  advanced: [
    {
      id: 'advanced-1',
      title: 'git rebase - Reorganizando Hist√≥rico',
      type: 'command',
      duration: '20 min',
      difficulty: 'Avan√ßado',
      description: 'Aprenda a reorganizar commits de forma elegante',
      content: {
        theory: `
O \`git rebase\` √© uma ferramenta poderosa para reorganizar o hist√≥rico.

**Rebase vs Merge:**
‚Ä¢ **Merge**: Mant√©m hist√≥rico original, cria merge commit
‚Ä¢ **Rebase**: Reescreve hist√≥rico, cria linha linear

**Tipos de rebase:**
\`\`\`bash
git rebase main              # Rebase branch atual em main
git rebase -i HEAD~3         # Interactive rebase dos √∫ltimos 3 commits
git rebase --onto new-base old-base branch  # Rebase avan√ßado
\`\`\`

**Interactive rebase permite:**
‚Ä¢ **pick**: Manter commit como est√°
‚Ä¢ **reword**: Mudar mensagem do commit
‚Ä¢ **edit**: Pausar para editar commit
‚Ä¢ **squash**: Combinar com commit anterior
‚Ä¢ **drop**: Remover commit

‚ö†Ô∏è **NUNCA** fa√ßa rebase de commits j√° compartilhados!
        `,
        exercise: {
          task: 'Fa√ßa rebase interativo dos √∫ltimos 2 commits',
          command: 'git rebase -i HEAD~2',
          expectedOutput: 'Interactive rebase started',
          hint: 'Use git rebase -i HEAD~2 para editar os √∫ltimos 2 commits',
          explanation: 'Excelente! O rebase interativo √© uma ferramenta poderosa para manter um hist√≥rico limpo.'
        }
      }
    }
    // ... mais li√ß√µes avan√ßadas
  ]
};

export const badges: Record<string, Badge> = {
  'git-starter': {
    name: 'Git Starter',
    description: 'Completou a primeira li√ß√£o',
    icon: 'üå±',
    color: 'green'
  },
  'commit-master': {
    name: 'Commit Master',
    description: 'Fez 10 commits corretos',
    icon: 'üíæ',
    color: 'blue'
  },
  'branch-ninja': {
    name: 'Branch Ninja',
    description: 'Dominou o uso de branches',
    icon: 'ü•∑',
    color: 'purple'
  },
  'merge-champion': {
    name: 'Merge Champion',
    description: 'Resolveu conflitos como um pro',
    icon: 'üèÜ',
    color: 'gold'
  },
  'rebase-wizard': {
    name: 'Rebase Wizard',
    description: 'Reorganizou hist√≥rico perfeitamente',
    icon: 'üßô‚Äç‚ôÇÔ∏è',
    color: 'indigo'
  }
};

export const tips: Tip[] = [
  {
    title: 'Commits Frequentes',
    description: 'Fa√ßa commits pequenos e frequentes. √â mais f√°cil reverter mudan√ßas espec√≠ficas.',
    icon: 'üí°'
  },
  {
    title: 'Mensagens Descritivas',
    description: 'Escreva mensagens que expliquem "por que" voc√™ fez a mudan√ßa, n√£o "o que" mudou.',
    icon: 'üìù'
  },
  {
    title: 'Branches para Tudo',
    description: 'Crie um branch para cada feature ou bug fix. Mantenha main sempre est√°vel.',
    icon: 'üåø'
  },
  {
    title: 'Git Status √© Vida',
    description: 'Use git status constantemente para entender o estado atual do reposit√≥rio.',
    icon: 'üîç'
  }
];
